#!/usr/bin/env python

# ==============================================================================
#
#   ascii2gadget.py
#
#   Converts an ASCII file to the Gadget Legacy 1 format using the `glio`
#   Python 2.X package. Latter runs on Python 3.X using the `future` package.
#
#
# ==============================================================================


import os
import sys
import numpy as np

import astropy.units as u
from astropy.units import cds
cds.enable()

# Using `glio` (written in Python 2.x) in Python 3.x
glio_path = os.path.abspath("../../../lib")
#print(f'Abs path to glio: {glio_path}')
if glio_path not in sys.path: sys.path.append(glio_path)
from past.translation import autotranslate
autotranslate(['glio'])
import glio


def ascii2gadget(infile, outfile,
                 LBOX, START_Z,
                 H0, OMEGA_M, OMEGA_L,
                 UNIT_S_IN_CM : float = 3.0856775814671917e24,
                 UNIT_V_IN_CMpS : float = 2073865.2969925447,
                 UNIT_M_IN_1E11MSOL : float = 1.988410e44):
  '''
  Function to convert an ASCII file to the Gadget Legacy 1 format.
  
  Parameters:
  -----------
  infile : str
    Input ASCII file containing 7 columns that follow the order below:

      x | y | z | v_x | v_y | v_z | m

    where the first three columns contain the coordinates of the particles,
    the next three columns contain the velocity components of the particles,
    while the last column contains the particle masses.

    If there is only a single massbin, then the last column is not written to
    the new file. (This is required for `gevolution` compatibility.)
  outfile : str
    Output Gadget-2 (legacy) format file.
  LBOX : float

  START_Z : float
    
  '''

  #Setting up the units of distance and time
  UNIT_S = 3.0856775814671917e24    # Unit distance in [cm] (in input file)
  UNIT_V = 2073865.2969925447       # Unit velocity in [cm/s] (in input file)
  #UNIT_T = 47.14829951063323        # Unit time in [Gy] (in input file)
  UNIT_M = 1.988410e44      # Unit mass in [1e11 M_sol] (in input file)

  # Calculating the Hubble parameter
  h = H0/100

  # Reading the input data
  particle_data = np.genfromtxt(infile, dtype=np.float64)

  # Creating array of X coordinates, V velocities and M particle masses
  # Coordinates generated by StePS are given in [Mpc], that's why they're needed
  # to be multiplied with `h`, since GADGET uses [Mpc/h] units
  X = particle_data[:,0:3] * h * UNIT_S / UNIT_S_IN_CM      # Coordinates
  V = particle_data[:,3:6] * UNIT_V / UNIT_V_IN_CMpS        # Velocities
  M = particle_data[:,6] * h * UNIT_M / UNIT_M_IN_1E11MSOL  # Masses
  del(particle_data)

  # Total number of particles
  NPART = len(X)

  # Creating the Gadget file
  s = glio.GadgetSnapshot(outfile)
  s.header.npart = np.array([0,NPART,0,0,0,0], dtype=np.int32)
  s.header.mass = np.array([0,0,0,0,0,0], dtype=np.float64)
  s.header.time = np.array([1/(START_Z+1)], dtype=np.float64)
  s.header.redshift = np.array([START_Z], dtype=np.float64)
  s.header.flag_sfr = np.array([0], dtype=np.int32)
  s.header.flag_feedback = np.array([0], dtype=np.int32)
  s.header.npartTotal =  np.array([0,NPART,0,0,0,0], dtype=np.int32)
  s.header.flag_cooling = np.array([0], dtype=np.int32)
  s.header.num_files = np.array([1], dtype=np.int32)
  s.header.BoxSize = np.array([LBOX*UNIT_S/UNIT_S_IN_CM], dtype=np.float64)
  s.header.Omega0 =  np.array([OMEGA_M], dtype=np.float64)
  s.header.OmegaLambda =  np.array([OMEGA_L], dtype=np.float64)
  s.header.HubbleParam = np.array([h], dtype=np.float64)
  s.header.flag_stellarage = np.array([0], dtype=np.int32)
  s.header.flag_metals = np.array([0], dtype=np.int32)
  s.header.npartTotalHighWord = np.array([0,0,0,0,0,0], dtype=np.uint32)
  s.header.flag_entropy_instead_u = np.array([0], dtype=np.int32)
  s.header._padding = np.zeros(15,dtype=np.int32)
  
  s.pos[1] = np.array(X, dtype=np.float32)
  s.vel[1] = np.array(V, dtype=np.float32)
  s.ID[1] = np.array(range(0,NPART), dtype=np.uint32)
  s.mass[1] = np.array(M, dtype=np.float32)


  s.save(outfile)
  np.savetxt(f'{outfile}_Mass', M)


if __name__ == '__main__':

  infile = sys.argv[1]          # Input cosmological file with coords in [Mpc]
  outfile = sys.argv[2]         # Target cosmological file with coords in [Mpc/h]

  LBOX = float(sys.argv[3])     # Boxsize of the input volume [Mpc/h]
  START_Z = float(sys.argv[4])  # Redshift of the input volume
  H0 = float(sys.argv[5])       # Hubble constant [km/s/Mpc]
  OMEGA_M = float(sys.argv[6])  # Matter density in the given cosmology
  OMEGA_L = float(sys.argv[7])  # Dark energy density in the given cosmology


  ascii2gadget(infile=infile, outfile=outfile,
               LBOX=LBOX, START_Z=START_Z,
               H0=H0, OMEGA_M=OMEGA_M, OMEGA_L=OMEGA_L)